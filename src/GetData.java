import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;



public class GetData extends javax.swing.JFrame {
      private javax.swing.JButton deleteButton; 
    private javax.swing.JButton updateButton; 
 private final Connection connection;

    public GetData() {
        initComponents();
         connection = Connect.ConnectDB();
         deleteButton = jButton2; // Initialize delete button instance variable with jButton2
        updateButton = jButton3;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Admission ID", "Patient ID", "Patient Name", "Gender", "Blood Group", "Disease", "Admit Date", "Room No", "Bed ID", "Bed Type", "Room Type", "Discharge Date", "Bed Identifier"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addGap(0, 35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String admissionID = JOptionPane.showInputDialog(this, "Enter Patient ID:");

    // If the patientID is not empty or null, fetch and update table data
    if (admissionID != null && !admissionID.isEmpty()) {
        fetchDataAndUpdateTable(admissionID);
    } else {
        JOptionPane.showMessageDialog(this, "Patient ID is required.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:int selectedRow = jTable1.getSelectedRow();
    int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String admissionID = (String) jTable1.getValueAt(selectedRow, 0);
            deleteRecord(admissionID);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
         
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String admissionID = (String) jTable1.getValueAt(selectedRow, 0);
            updateRecord(admissionID);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed
private void deleteRecord(String admissionID) {
        try {
            String query = "DELETE FROM admission WHERE AdmissionID=?";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setString(1, admissionID);
            int deletedRows = pst.executeUpdate();
            if (deletedRows > 0) {
                JOptionPane.showMessageDialog(this, "Record deleted successfully.");
                fetchDataAndUpdateTable("");
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete record.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting record: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

private void updateRecord(String admissionID) {
    try {
        // Query to fetch the record based on AdmissionID
        String query = "SELECT * FROM admission WHERE AdmissionID=?";
        PreparedStatement pst = connection.prepareStatement(query);
        pst.setString(1, admissionID);
        ResultSet rs = pst.executeQuery();

        // Check if the record exists
        if (rs.next()) {
            // Extract data from the result set
            String patientID = rs.getString("PatientID");
            String patientName = rs.getString("PatientName");
            String disease = rs.getString("Disease");
            String gender = rs.getString("Gender");
            String bloodGroup = rs.getString("BloodGroup");
            String admitDate = rs.getString("AdmitDate");
            String dischargeDate = rs.getString("DischargeDate");
            String roomNo = rs.getString("RoomNo");
            String bedID = rs.getString("BedID");
            String bedIdentifier = rs.getString("BedIdentifier");
            String bedType = rs.getString("BedType");
            String roomType = rs.getString("RoomType");

            // Pass the fetched data to the update form or dialog
            // Here, you would typically open a new form or dialog for updating the record
            // Populate the fields with the fetched data
            UpdateRecordForm updateForm = new UpdateRecordForm(patientID, patientName, disease, gender, bloodGroup, admitDate, dischargeDate, roomNo, bedID, bedIdentifier, bedType, roomType);
            updateForm.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Record not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        pst.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating record: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void fetchDataAndUpdateTable(String patientID) {
    if (connection == null) {
        JOptionPane.showMessageDialog(this, "Failed to connect to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Query to fetch data based on patient ID
     String sql = "SELECT * FROM admission WHERE PatientID = ?";


    try {
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, patientID);
        ResultSet result = statement.executeQuery();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Clear existing data from the table

        // Populate the table with fetched data
        boolean found = false;
        while (result.next()) {
            Object[] row = new Object[]{
                result.getString("AdmissionID"),
                result.getString("PatientID"),
                result.getString("PatientName"),
                result.getString("Gender"),
                result.getString("BloodGroup"),
                result.getString("Disease"),
                result.getString("AdmitDate"),
                result.getString("RoomNo"),
                result.getString("BedID"),
                result.getString("BedType"),
                result.getString("RoomType"),
                result.getString("DischargeDate"),
                result.getString("BedIdentifier")
            };
            model.addRow(row);
            found = true;
        }
        if (!found) {
            JOptionPane.showMessageDialog(this, "No records found for Patient ID: " + patientID, "No Records", JOptionPane.INFORMATION_MESSAGE);
        }

        result.close();
        statement.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error fetching data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GetData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
